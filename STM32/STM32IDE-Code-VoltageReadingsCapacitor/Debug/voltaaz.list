
voltaaz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004978  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b98  08004b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08004bf8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004bf8  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdb  00000000  00000000  00014ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00016ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a05  00000000  00000000  000177e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b426  00000000  00000000  000181ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edf6  00000000  00000000  00033613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b13c7  00000000  00000000  00042409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f37d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  000f3814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f73c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004af0 	.word	0x08004af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004af0 	.word	0x08004af0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb08 	bl	8000b8a <HAL_Init>
  uint16_t raw;
  char msg[10];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f837 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f931 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8ff 	bl	8000784 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000586:	f000 f887 	bl	8000698 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	 // HAL_GPIO_WritePin(GPIO, GPIO_PIN_4,GPIO_PIN_SET);

	  HAL_ADC_Start(&hadc1);
 800058a:	4815      	ldr	r0, [pc, #84]	@ (80005e0 <main+0x70>)
 800058c:	f000 fed6 	bl	800133c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <main+0x70>)
 8000596:	f000 ff8b 	bl	80014b0 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 800059a:	4811      	ldr	r0, [pc, #68]	@ (80005e0 <main+0x70>)
 800059c:	f001 f860 	bl	8001660 <HAL_ADC_GetValue>
 80005a0:	4603      	mov	r3, r0
 80005a2:	81fb      	strh	r3, [r7, #14]
    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ae:	f002 f809 	bl	80025c4 <HAL_GPIO_WritePin>

	  sprintf(msg, "%hu\r\n", raw);
 80005b2:	89fa      	ldrh	r2, [r7, #14]
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	490b      	ldr	r1, [pc, #44]	@ (80005e4 <main+0x74>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fdf9 	bl	80041b0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe05 	bl	80001d0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <main+0x78>)
 80005d2:	f003 f8ed 	bl	80037b0 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80005d6:	2064      	movs	r0, #100	@ 0x64
 80005d8:	f000 fb4c 	bl	8000c74 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005dc:	bf00      	nop
 80005de:	e7d4      	b.n	800058a <main+0x1a>
 80005e0:	20000078 	.word	0x20000078
 80005e4:	08004b08 	.word	0x08004b08
 80005e8:	200000dc 	.word	0x200000dc

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	@ 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	@ 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fdf8 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000612:	f002 f80d 	bl	8002630 <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061c:	f000 f942 	bl	80008a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000620:	f001 ffe8 	bl	80025f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <SystemClock_Config+0xa8>)
 8000626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800062a:	4a1a      	ldr	r2, [pc, #104]	@ (8000694 <SystemClock_Config+0xa8>)
 800062c:	f023 0318 	bic.w	r3, r3, #24
 8000630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000634:	2314      	movs	r3, #20
 8000636:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000644:	23a0      	movs	r3, #160	@ 0xa0
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f843 	bl	80026dc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800065c:	f000 f922 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fc91 	bl	8002fa0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000684:	f000 f90e 	bl	80008a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000688:	f003 f834 	bl	80036f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	@ 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006bc:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <MX_ADC1_Init+0xe4>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006da:	2204      	movs	r2, #4
 80006dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_ADC1_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_ADC1_Init+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_ADC1_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071a:	4817      	ldr	r0, [pc, #92]	@ (8000778 <MX_ADC1_Init+0xe0>)
 800071c:	f000 fcc4 	bl	80010a8 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000726:	f000 f8bd 	bl	80008a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4810      	ldr	r0, [pc, #64]	@ (8000778 <MX_ADC1_Init+0xe0>)
 8000736:	f001 fc49 	bl	8001fcc <HAL_ADCEx_MultiModeConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000740:	f000 f8b0 	bl	80008a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_ADC1_Init+0xe8>)
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000748:	2306      	movs	r3, #6
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000750:	237f      	movs	r3, #127	@ 0x7f
 8000752:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000754:	2304      	movs	r3, #4
 8000756:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_ADC1_Init+0xe0>)
 8000762:	f000 ff8b 	bl	800167c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800076c:	f000 f89a 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000078 	.word	0x20000078
 800077c:	50040000 	.word	0x50040000
 8000780:	21800100 	.word	0x21800100

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	f002 ffa4 	bl	8003714 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f867 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000dc 	.word	0x200000dc
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_GPIO_Init+0xb8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a27      	ldr	r2, [pc, #156]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a21      	ldr	r2, [pc, #132]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_GPIO_Init+0xb8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_GPIO_Init+0xb8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2110      	movs	r1, #16
 8000846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084a:	f001 febb 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4813      	ldr	r0, [pc, #76]	@ (80008a0 <MX_GPIO_Init+0xbc>)
 8000854:	f001 feb6 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000858:	2310      	movs	r3, #16
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f001 fd35 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_GPIO_Init+0xbc>)
 800088e:	f001 fd27 	bl	80022e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a15      	ldr	r2, [pc, #84]	@ (800096c <HAL_ADC_MspInit+0x74>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d124      	bne.n	8000964 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 8000920:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_ADC_MspInit+0x78>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800094a:	2308      	movs	r3, #8
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800094e:	230b      	movs	r3, #11
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f001 fcbe 	bl	80022e0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	50040000 	.word	0x50040000
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b096      	sub	sp, #88	@ 0x58
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2234      	movs	r2, #52	@ 0x34
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fc2b 	bl	80041f0 <memset>
  if(huart->Instance==USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <HAL_UART_MspInit+0xcc>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d148      	bne.n	8000a36 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fd19 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009bc:	f7ff ff72 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c0:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	4a19      	ldr	r2, [pc, #100]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_UART_MspInit+0xd0>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009f0:	2304      	movs	r3, #4
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0e:	f001 fc67 	bl	80022e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a16:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a24:	2303      	movs	r3, #3
 8000a26:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f001 fc55 	bl	80022e0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a36:	bf00      	nop
 8000a38:	3758      	adds	r7, #88	@ 0x58
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8c9 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 fb92 	bl	8004200 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20008000 	.word	0x20008000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000164 	.word	0x20000164
 8000b10:	200002b8 	.word	0x200002b8

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f003 fb51 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f7ff fd01 	bl	8000570 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b7c:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 8000b80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b84:	200002b4 	.word	0x200002b4

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f001 fb6f 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f80e 	bl	8000bbc <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe80 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_InitTick+0x6c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d023      	beq.n	8000c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_InitTick+0x70>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fb6d 	bl	80022c6 <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10f      	bne.n	8000c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d809      	bhi.n	8000c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f001 fb45 	bl	800228e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_InitTick+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000168 	.word	0x20000168

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000168 	.word	0x20000168

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3360      	adds	r3, #96	@ 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LL_ADC_SetOffset+0x44>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	4313      	orrs	r3, r2
 8000d54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	03fff000 	.word	0x03fff000

08000d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3360      	adds	r3, #96	@ 0x60
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3360      	adds	r3, #96	@ 0x60
 8000da8:	461a      	mov	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	615a      	str	r2, [r3, #20]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b087      	sub	sp, #28
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3330      	adds	r3, #48	@ 0x30
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	4413      	add	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	211f      	movs	r1, #31
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0e9b      	lsrs	r3, r3, #26
 8000e52:	f003 011f 	and.w	r1, r3, #31
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3314      	adds	r3, #20
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	0e5b      	lsrs	r3, r3, #25
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0d1b      	lsrs	r3, r3, #20
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	0d1b      	lsrs	r3, r3, #20
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0318 	and.w	r3, r3, #24
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000eec:	40d9      	lsrs	r1, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0007ffff 	.word	0x0007ffff

08000f10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6093      	str	r3, [r2, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fa8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <LL_ADC_IsEnabled+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_ADC_IsEnabled+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001042:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001046:	f043 0204 	orr.w	r2, r3, #4
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b04      	cmp	r3, #4
 800106c:	d101      	bne.n	8001072 <LL_ADC_REG_IsConversionOngoing+0x18>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b08      	cmp	r3, #8
 8001092:	d101      	bne.n	8001098 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e12b      	b.n	800131a <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fc11 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff3f 	bl	8000f6c <LL_ADC_IsDeepPowerDownEnabled>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff25 	bl	8000f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff5a 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d115      	bne.n	800113a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff3e 	bl	8000f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001118:	4b82      	ldr	r3, [pc, #520]	@ (8001324 <HAL_ADC_Init+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	4a82      	ldr	r2, [pc, #520]	@ (8001328 <HAL_ADC_Init+0x280>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	3301      	adds	r3, #1
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800112c:	e002      	b.n	8001134 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff3c 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff75 	bl	800105a <LL_ADC_REG_IsConversionOngoing>
 8001170:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 80c4 	bne.w	8001308 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 80c0 	bne.w	8001308 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001190:	f043 0202 	orr.w	r2, r3, #2
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff35 	bl	800100c <LL_ADC_IsEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d110      	bne.n	80011ca <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011a8:	4860      	ldr	r0, [pc, #384]	@ (800132c <HAL_ADC_Init+0x284>)
 80011aa:	f7ff ff2f 	bl	800100c <LL_ADC_IsEnabled>
 80011ae:	4604      	mov	r4, r0
 80011b0:	485f      	ldr	r0, [pc, #380]	@ (8001330 <HAL_ADC_Init+0x288>)
 80011b2:	f7ff ff2b 	bl	800100c <LL_ADC_IsEnabled>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4323      	orrs	r3, r4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4619      	mov	r1, r3
 80011c4:	485b      	ldr	r0, [pc, #364]	@ (8001334 <HAL_ADC_Init+0x28c>)
 80011c6:	f7ff fd79 	bl	8000cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e5b      	ldrb	r3, [r3, #25]
 80011ce:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011da:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011e0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	3b01      	subs	r3, #1
 80011fe:	045b      	lsls	r3, r3, #17
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <HAL_ADC_Init+0x290>)
 800122a:	4013      	ands	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	69b9      	ldr	r1, [r7, #24]
 8001232:	430b      	orrs	r3, r1
 8001234:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff20 	bl	8001080 <LL_ADC_INJ_IsConversionOngoing>
 8001240:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d13d      	bne.n	80012c4 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13a      	bne.n	80012c4 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001252:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800125a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800126a:	f023 0302 	bic.w	r3, r3, #2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	430b      	orrs	r3, r1
 8001276:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800127e:	2b01      	cmp	r3, #1
 8001280:	d118      	bne.n	80012b4 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001298:	4311      	orrs	r1, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800129e:	4311      	orrs	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012a4:	430a      	orrs	r2, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	e007      	b.n	80012c4 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10c      	bne.n	80012e6 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f023 010f 	bic.w	r1, r3, #15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	1e5a      	subs	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e4:	e007      	b.n	80012f6 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020f 	bic.w	r2, r2, #15
 80012f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	655a      	str	r2, [r3, #84]	@ 0x54
 8001306:	e007      	b.n	8001318 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001318:	7ffb      	ldrb	r3, [r7, #31]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	053e2d63 	.word	0x053e2d63
 800132c:	50040000 	.word	0x50040000
 8001330:	50040100 	.word	0x50040100
 8001334:	50040300 	.word	0x50040300
 8001338:	fff0c007 	.word	0xfff0c007

0800133c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001344:	4857      	ldr	r0, [pc, #348]	@ (80014a4 <HAL_ADC_Start+0x168>)
 8001346:	f7ff fde3 	bl	8000f10 <LL_ADC_GetMultimode>
 800134a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe82 	bl	800105a <LL_ADC_REG_IsConversionOngoing>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 809c 	bne.w	8001496 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_ADC_Start+0x30>
 8001368:	2302      	movs	r3, #2
 800136a:	e097      	b.n	800149c <HAL_ADC_Start+0x160>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fd7d 	bl	8001e74 <ADC_Enable>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 8083 	bne.w	800148c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a42      	ldr	r2, [pc, #264]	@ (80014a8 <HAL_ADC_Start+0x16c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d002      	beq.n	80013aa <HAL_ADC_Start+0x6e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	e000      	b.n	80013ac <HAL_ADC_Start+0x70>
 80013aa:	4b40      	ldr	r3, [pc, #256]	@ (80014ac <HAL_ADC_Start+0x170>)
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d002      	beq.n	80013ba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013d2:	d106      	bne.n	80013e2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	f023 0206 	bic.w	r2, r3, #6
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	221c      	movs	r2, #28
 80013ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2a      	ldr	r2, [pc, #168]	@ (80014a8 <HAL_ADC_Start+0x16c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d002      	beq.n	8001408 <HAL_ADC_Start+0xcc>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	e000      	b.n	800140a <HAL_ADC_Start+0xce>
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HAL_ADC_Start+0x170>)
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	4293      	cmp	r3, r2
 8001410:	d008      	beq.n	8001424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d002      	beq.n	8001424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d114      	bne.n	800144e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800143a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fdf3 	bl	8001032 <LL_ADC_REG_StartConversion>
 800144c:	e025      	b.n	800149a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001452:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_ADC_Start+0x16c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d002      	beq.n	800146a <HAL_ADC_Start+0x12e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	e000      	b.n	800146c <HAL_ADC_Start+0x130>
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_ADC_Start+0x170>)
 800146c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00f      	beq.n	800149a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001482:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
 800148a:	e006      	b.n	800149a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001494:	e001      	b.n	800149a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001496:	2302      	movs	r3, #2
 8001498:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	50040300 	.word	0x50040300
 80014a8:	50040100 	.word	0x50040100
 80014ac:	50040000 	.word	0x50040000

080014b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014ba:	4866      	ldr	r0, [pc, #408]	@ (8001654 <HAL_ADC_PollForConversion+0x1a4>)
 80014bc:	f7ff fd28 	bl	8000f10 <LL_ADC_GetMultimode>
 80014c0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d102      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80014ca:	2308      	movs	r3, #8
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e02a      	b.n	8001526 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d002      	beq.n	80014e2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b09      	cmp	r3, #9
 80014e0:	d111      	bne.n	8001506 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	f043 0220 	orr.w	r2, r3, #32
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0a4      	b.n	800164a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001500:	2304      	movs	r3, #4
 8001502:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001504:	e00f      	b.n	8001526 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001506:	4853      	ldr	r0, [pc, #332]	@ (8001654 <HAL_ADC_PollForConversion+0x1a4>)
 8001508:	f7ff fd10 	bl	8000f2c <LL_ADC_GetMultiDMATransfer>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001516:	f043 0220 	orr.w	r2, r3, #32
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e093      	b.n	800164a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001522:	2304      	movs	r3, #4
 8001524:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001526:	f7ff fb99 	bl	8000c5c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800152c:	e021      	b.n	8001572 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d01d      	beq.n	8001572 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001536:	f7ff fb91 	bl	8000c5c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d302      	bcc.n	800154c <HAL_ADC_PollForConversion+0x9c>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d112      	bne.n	8001572 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10b      	bne.n	8001572 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	f043 0204 	orr.w	r2, r3, #4
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e06b      	b.n	800164a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0d6      	beq.n	800152e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001584:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fc2f 	bl	8000df4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01c      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e5b      	ldrb	r3, [r3, #25]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d118      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d111      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <HAL_ADC_PollForConversion+0x1a8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d002      	beq.n	80015e6 <HAL_ADC_PollForConversion+0x136>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	e000      	b.n	80015e8 <HAL_ADC_PollForConversion+0x138>
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_ADC_PollForConversion+0x1ac>)
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d008      	beq.n	8001602 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d002      	beq.n	8001602 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d104      	bne.n	800160c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e00c      	b.n	8001626 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <HAL_ADC_PollForConversion+0x1a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d002      	beq.n	800161c <HAL_ADC_PollForConversion+0x16c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	e000      	b.n	800161e <HAL_ADC_PollForConversion+0x16e>
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_ADC_PollForConversion+0x1ac>)
 800161e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d104      	bne.n	8001636 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2208      	movs	r2, #8
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e008      	b.n	8001648 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	220c      	movs	r2, #12
 8001646:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	50040300 	.word	0x50040300
 8001658:	50040100 	.word	0x50040100
 800165c:	50040000 	.word	0x50040000

08001660 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0b6      	sub	sp, #216	@ 0xd8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x22>
 800169a:	2302      	movs	r3, #2
 800169c:	e3d5      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x7ce>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fcd5 	bl	800105a <LL_ADC_REG_IsConversionOngoing>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 83ba 	bne.w	8001e2c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d824      	bhi.n	8001712 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	3b02      	subs	r3, #2
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d81b      	bhi.n	800170a <HAL_ADC_ConfigChannel+0x8e>
 80016d2:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <HAL_ADC_ConfigChannel+0x5c>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	080016f1 	.word	0x080016f1
 80016e0:	080016f9 	.word	0x080016f9
 80016e4:	08001701 	.word	0x08001701
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80016e8:	230c      	movs	r3, #12
 80016ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016ee:	e010      	b.n	8001712 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80016f0:	2312      	movs	r3, #18
 80016f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016f6:	e00c      	b.n	8001712 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80016f8:	2318      	movs	r3, #24
 80016fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016fe:	e008      	b.n	8001712 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001708:	e003      	b.n	8001712 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800170a:	2306      	movs	r3, #6
 800170c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001710:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001720:	f7ff fb7b 	bl	8000e1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc96 	bl	800105a <LL_ADC_REG_IsConversionOngoing>
 800172e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fca2 	bl	8001080 <LL_ADC_INJ_IsConversionOngoing>
 800173c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 81bf 	bne.w	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800174a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 81ba 	bne.w	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800175c:	d10f      	bne.n	800177e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fb82 	bl	8000e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fb29 	bl	8000dce <LL_ADC_SetSamplingTimeCommonConfig>
 800177c:	e00e      	b.n	800179c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	461a      	mov	r2, r3
 800178c:	f7ff fb71 	bl	8000e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb19 	bl	8000dce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00a      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6919      	ldr	r1, [r3, #16]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017ce:	f7ff faa9 	bl	8000d24 <LL_ADC_SetOffset>
 80017d2:	e179      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fac6 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10a      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x184>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fabb 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	f003 021f 	and.w	r2, r3, #31
 80017fe:	e01e      	b.n	800183e <HAL_ADC_ConfigChannel+0x1c2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fab0 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e004      	b.n	800183c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x1da>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0e9b      	lsrs	r3, r3, #26
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	e018      	b.n	8001888 <HAL_ADC_ConfigChannel+0x20c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800186a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800186e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001872:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800187a:	2320      	movs	r3, #32
 800187c:	e004      	b.n	8001888 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800187e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa7f 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa63 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x24a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa58 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	e01e      	b.n	8001904 <HAL_ADC_ConfigChannel+0x288>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fa4d 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80018e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80018ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80018f4:	2320      	movs	r3, #32
 80018f6:	e004      	b.n	8001902 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80018f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_ADC_ConfigChannel+0x2a0>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	e018      	b.n	800194e <HAL_ADC_ConfigChannel+0x2d2>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001930:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001940:	2320      	movs	r3, #32
 8001942:	e004      	b.n	800194e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800194e:	429a      	cmp	r2, r3
 8001950:	d106      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fa1c 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fa00 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <HAL_ADC_ConfigChannel+0x310>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f9f5 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 021f 	and.w	r2, r3, #31
 800198a:	e01e      	b.n	80019ca <HAL_ADC_ConfigChannel+0x34e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2102      	movs	r1, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f9ea 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80019b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80019ba:	2320      	movs	r3, #32
 80019bc:	e004      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80019be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x366>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	e014      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x390>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80019f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80019f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9bd 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2103      	movs	r1, #3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f9a1 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x3ce>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2103      	movs	r1, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f996 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	e017      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x3fe>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f98b 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a64:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x416>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	e011      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x43a>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001aae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f968 	bl	8000d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fa9d 	bl	800100c <LL_ADC_IsEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 813f 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6819      	ldr	r1, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f7ff f9ee 	bl	8000ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a8e      	ldr	r2, [pc, #568]	@ (8001d2c <HAL_ADC_ConfigChannel+0x6b0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	f040 8130 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x4a4>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	bf94      	ite	ls
 8001b18:	2301      	movls	r3, #1
 8001b1a:	2300      	movhi	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e019      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x4d8>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e003      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	bf94      	ite	ls
 8001b4e:	2301      	movls	r3, #1
 8001b50:	2300      	movhi	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d079      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x4f8>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b72:	e015      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x524>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b84:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e003      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	069b      	lsls	r3, r3, #26
 8001b9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x544>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	e017      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x574>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x59a>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	e018      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x5cc>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	e080      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x5ec>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	3301      	adds	r3, #1
 8001c60:	069b      	lsls	r3, r3, #26
 8001c62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c66:	e015      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x618>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e003      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	069b      	lsls	r3, r3, #26
 8001c90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x638>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	e017      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x668>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	61bb      	str	r3, [r7, #24]
  return result;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e003      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x694>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	051b      	lsls	r3, r3, #20
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	e01d      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x6d0>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
  return result;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e005      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x6bc>
 8001d2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f003 021f 	and.w	r2, r3, #31
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	051b      	lsls	r3, r3, #20
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7ff f88d 	bl	8000e72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d06c      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	483c      	ldr	r0, [pc, #240]	@ (8001e58 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d66:	f7fe ffcf 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001d6a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3a      	ldr	r2, [pc, #232]	@ (8001e5c <HAL_ADC_ConfigChannel+0x7e0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d127      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d121      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a35      	ldr	r2, [pc, #212]	@ (8001e60 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d157      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d96:	4619      	mov	r1, r3
 8001d98:	482f      	ldr	r0, [pc, #188]	@ (8001e58 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d9a:	f7fe ffa2 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d9e:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <HAL_ADC_ConfigChannel+0x7e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <HAL_ADC_ConfigChannel+0x7ec>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dc6:	e03a      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_ADC_ConfigChannel+0x7f0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d113      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e60 <HAL_ADC_ConfigChannel+0x7e4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d12a      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df0:	4619      	mov	r1, r3
 8001df2:	4819      	ldr	r0, [pc, #100]	@ (8001e58 <HAL_ADC_ConfigChannel+0x7dc>)
 8001df4:	f7fe ff75 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001df8:	e021      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e70 <HAL_ADC_ConfigChannel+0x7f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11c      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d116      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d111      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e26:	f7fe ff5c 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
 8001e2a:	e008      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	37d8      	adds	r7, #216	@ 0xd8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	80080000 	.word	0x80080000
 8001e58:	50040300 	.word	0x50040300
 8001e5c:	c7520000 	.word	0xc7520000
 8001e60:	50040000 	.word	0x50040000
 8001e64:	20000000 	.word	0x20000000
 8001e68:	053e2d63 	.word	0x053e2d63
 8001e6c:	cb840000 	.word	0xcb840000
 8001e70:	80000001 	.word	0x80000001

08001e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f8c1 	bl	800100c <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d169      	bne.n	8001f64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <ADC_Enable+0xfc>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e055      	b.n	8001f66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f890 	bl	8000fe4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ec4:	482b      	ldr	r0, [pc, #172]	@ (8001f74 <ADC_Enable+0x100>)
 8001ec6:	f7fe ff1f 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001eca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed4:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <ADC_Enable+0x104>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <ADC_Enable+0x108>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eee:	e002      	b.n	8001ef6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001efc:	f7fe feae 	bl	8000c5c <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f02:	e028      	b.n	8001f56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f87f 	bl	800100c <LL_ADC_IsEnabled>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f863 	bl	8000fe4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f1e:	f7fe fe9d 	bl	8000c5c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d914      	bls.n	8001f56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00d      	beq.n	8001f56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e007      	b.n	8001f66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d1cf      	bne.n	8001f04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	8000003f 	.word	0x8000003f
 8001f74:	50040300 	.word	0x50040300
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	053e2d63 	.word	0x053e2d63

08001f80 <LL_ADC_IsEnabled>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <LL_ADC_IsEnabled+0x18>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <LL_ADC_IsEnabled+0x1a>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d101      	bne.n	8001fbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b09f      	sub	sp, #124	@ 0x7c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e089      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a42      	ldr	r2, [pc, #264]	@ (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d102      	bne.n	800200a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	e001      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e068      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ffb9 	bl	8001fa6 <LL_ADC_REG_IsConversionOngoing>
 8002034:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb3 	bl	8001fa6 <LL_ADC_REG_IsConversionOngoing>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d14a      	bne.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002048:	2b00      	cmp	r3, #0
 800204a:	d147      	bne.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800204c:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800204e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d027      	beq.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800206a:	035b      	lsls	r3, r3, #13
 800206c:	430b      	orrs	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002072:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002074:	4824      	ldr	r0, [pc, #144]	@ (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002076:	f7ff ff83 	bl	8001f80 <LL_ADC_IsEnabled>
 800207a:	4604      	mov	r4, r0
 800207c:	4823      	ldr	r0, [pc, #140]	@ (800210c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800207e:	f7ff ff7f 	bl	8001f80 <LL_ADC_IsEnabled>
 8002082:	4603      	mov	r3, r0
 8002084:	4323      	orrs	r3, r4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d132      	bne.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800208a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002092:	f023 030f 	bic.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6811      	ldr	r1, [r2, #0]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6892      	ldr	r2, [r2, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020a6:	e023      	b.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b4:	4814      	ldr	r0, [pc, #80]	@ (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020b6:	f7ff ff63 	bl	8001f80 <LL_ADC_IsEnabled>
 80020ba:	4604      	mov	r4, r0
 80020bc:	4813      	ldr	r0, [pc, #76]	@ (800210c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020be:	f7ff ff5f 	bl	8001f80 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4323      	orrs	r3, r4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d112      	bne.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020d2:	f023 030f 	bic.w	r3, r3, #15
 80020d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020da:	e009      	b.n	80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80020ee:	e000      	b.n	80020f2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80020fe:	4618      	mov	r0, r3
 8002100:	377c      	adds	r7, #124	@ 0x7c
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	50040000 	.word	0x50040000
 800210c:	50040100 	.word	0x50040100
 8002110:	50040300 	.word	0x50040300

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	@ (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff47 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff5c 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffb0 	bl	8002234 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	e14e      	b.n	800258e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8140 	beq.w	8002588 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d005      	beq.n	8002320 <HAL_GPIO_Init+0x40>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d130      	bne.n	8002382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002356:	2201      	movs	r2, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 0201 	and.w	r2, r3, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b03      	cmp	r3, #3
 800238c:	d017      	beq.n	80023be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d123      	bne.n	8002412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 809a 	beq.w	8002588 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002454:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <HAL_GPIO_Init+0x2cc>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002458:	4a54      	ldr	r2, [pc, #336]	@ (80025ac <HAL_GPIO_Init+0x2cc>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002460:	4b52      	ldr	r3, [pc, #328]	@ (80025ac <HAL_GPIO_Init+0x2cc>)
 8002462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800246c:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_GPIO_Init+0x2d0>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002496:	d013      	beq.n	80024c0 <HAL_GPIO_Init+0x1e0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a46      	ldr	r2, [pc, #280]	@ (80025b4 <HAL_GPIO_Init+0x2d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a45      	ldr	r2, [pc, #276]	@ (80025b8 <HAL_GPIO_Init+0x2d8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1d8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a44      	ldr	r2, [pc, #272]	@ (80025bc <HAL_GPIO_Init+0x2dc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1d4>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024b4:	2307      	movs	r3, #7
 80024b6:	e004      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_GPIO_Init+0x1e2>
 80024c0:	2300      	movs	r3, #0
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	f002 0203 	and.w	r2, r2, #3
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4093      	lsls	r3, r2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024d2:	4937      	ldr	r1, [pc, #220]	@ (80025b0 <HAL_GPIO_Init+0x2d0>)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e0:	4b37      	ldr	r3, [pc, #220]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002504:	4a2e      	ldr	r2, [pc, #184]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002534:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002582:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <HAL_GPIO_Init+0x2e0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f aea9 	bne.w	80022f0 <HAL_GPIO_Init+0x10>
  }
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000
 80025b4:	48000400 	.word	0x48000400
 80025b8:	48000800 	.word	0x48000800
 80025bc:	48000c00 	.word	0x48000c00
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <HAL_PWREx_GetVoltageRange+0x18>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40007000 	.word	0x40007000

08002630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263e:	d130      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002640:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800264c:	d038      	beq.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002656:	4a1e      	ldr	r2, [pc, #120]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002658:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800265c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800265e:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2232      	movs	r2, #50	@ 0x32
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	4a1b      	ldr	r2, [pc, #108]	@ (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	3301      	adds	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002674:	e002      	b.n	800267c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3b01      	subs	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002688:	d102      	bne.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x60>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f2      	bne.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269c:	d110      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e00f      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ae:	d007      	beq.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026b0:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026b8:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40007000 	.word	0x40007000
 80026d4:	20000000 	.word	0x20000000
 80026d8:	431bde83 	.word	0x431bde83

080026dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 bc4f 	b.w	8002f8e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f0:	4b97      	ldr	r3, [pc, #604]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fa:	4b95      	ldr	r3, [pc, #596]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80e6 	beq.w	80028de <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x4c>
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	f040 808d 	bne.w	800283a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 8089 	bne.w	800283a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002728:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_RCC_OscConfig+0x66>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f000 bc26 	b.w	8002f8e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002746:	4b82      	ldr	r3, [pc, #520]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_RCC_OscConfig+0x80>
 8002752:	4b7f      	ldr	r3, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275a:	e005      	b.n	8002768 <HAL_RCC_OscConfig+0x8c>
 800275c:	4b7c      	ldr	r3, [pc, #496]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002768:	4293      	cmp	r3, r2
 800276a:	d224      	bcs.n	80027b6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fdd9 	bl	8003328 <RCC_SetFlashLatencyFromMSIRange>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f000 bc06 	b.w	8002f8e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	4b73      	ldr	r3, [pc, #460]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a72      	ldr	r2, [pc, #456]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b70      	ldr	r3, [pc, #448]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	496d      	ldr	r1, [pc, #436]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	4968      	ldr	r1, [pc, #416]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e025      	b.n	8002802 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b6:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a65      	ldr	r2, [pc, #404]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b63      	ldr	r3, [pc, #396]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	4960      	ldr	r1, [pc, #384]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	495b      	ldr	r1, [pc, #364]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fd98 	bl	8003328 <RCC_SetFlashLatencyFromMSIRange>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e3c5      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002802:	f000 fccd 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b51      	ldr	r3, [pc, #324]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4950      	ldr	r1, [pc, #320]	@ (8002954 <HAL_RCC_OscConfig+0x278>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a4e      	ldr	r2, [pc, #312]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002820:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002822:	4b4e      	ldr	r3, [pc, #312]	@ (800295c <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f9c8 	bl	8000bbc <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
 800282e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d052      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	e3a9      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d032      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a42      	ldr	r2, [pc, #264]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284e:	f7fe fa05 	bl	8000c5c <HAL_GetTick>
 8002852:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002856:	f7fe fa01 	bl	8000c5c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e392      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800287a:	f043 0308 	orr.w	r3, r3, #8
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b33      	ldr	r3, [pc, #204]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	4930      	ldr	r1, [pc, #192]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	492b      	ldr	r1, [pc, #172]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
 80028a6:	e01a      	b.n	80028de <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028a8:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a28      	ldr	r2, [pc, #160]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b4:	f7fe f9d2 	bl	8000c5c <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028bc:	f7fe f9ce 	bl	8000c5c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e35f      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1e0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d073      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d10e      	bne.n	8002914 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10b      	bne.n	8002914 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d063      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2f4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d15f      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e33c      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x250>
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0b      	ldr	r2, [pc, #44]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e025      	b.n	8002978 <HAL_RCC_OscConfig+0x29c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002934:	d114      	bne.n	8002960 <HAL_RCC_OscConfig+0x284>
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a02      	ldr	r2, [pc, #8]	@ (8002950 <HAL_RCC_OscConfig+0x274>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e013      	b.n	8002978 <HAL_RCC_OscConfig+0x29c>
 8002950:	40021000 	.word	0x40021000
 8002954:	08004b10 	.word	0x08004b10
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004
 8002960:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a8b      	ldr	r2, [pc, #556]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe f96c 	bl	8000c5c <HAL_GetTick>
 8002984:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe f968 	bl	8000c5c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e2f9      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299a:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x2ac>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe f958 	bl	8000c5c <HAL_GetTick>
 80029ac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe f954 	bl	8000c5c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e2e5      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d060      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x314>
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d116      	bne.n	8002a1e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_OscConfig+0x32c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e2c2      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b65      	ldr	r3, [pc, #404]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	4962      	ldr	r1, [pc, #392]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1c:	e040      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d023      	beq.n	8002a6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a26:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe f913 	bl	8000c5c <HAL_GetTick>
 8002a36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f90f 	bl	8000c5c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e2a0      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4c:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b51      	ldr	r3, [pc, #324]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	494e      	ldr	r1, [pc, #312]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e018      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe f8ef 	bl	8000c5c <HAL_GetTick>
 8002a7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe f8eb 	bl	8000c5c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e27c      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a94:	4b42      	ldr	r3, [pc, #264]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8082 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d05f      	beq.n	8002b76 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d037      	beq.n	8002b3c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e254      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002aee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002afe:	f7fe f8ad 	bl	8000c5c <HAL_GetTick>
 8002b02:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b06:	f7fe f8a9 	bl	8000c5c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e23a      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ef      	bne.n	8002b06 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2c:	f023 0210 	bic.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	491a      	ldr	r1, [pc, #104]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b42:	4a17      	ldr	r2, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe f886 	bl	8000c5c <HAL_GetTick>
 8002b50:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe f882 	bl	8000c5c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e213      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x478>
 8002b74:	e01d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe f869 	bl	8000c5c <HAL_GetTick>
 8002b8a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe f865 	bl	8000c5c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b11      	cmp	r3, #17
 8002b9a:	d903      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1f6      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
 8002ba0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4ba9      	ldr	r3, [pc, #676]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ed      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80bd 	beq.w	8002d3a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc6:	4ba1      	ldr	r3, [pc, #644]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b9e      	ldr	r3, [pc, #632]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a9d      	ldr	r2, [pc, #628]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b9b      	ldr	r3, [pc, #620]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf0:	4b97      	ldr	r3, [pc, #604]	@ (8002e50 <HAL_RCC_OscConfig+0x774>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d118      	bne.n	8002c2e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfc:	4b94      	ldr	r3, [pc, #592]	@ (8002e50 <HAL_RCC_OscConfig+0x774>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a93      	ldr	r2, [pc, #588]	@ (8002e50 <HAL_RCC_OscConfig+0x774>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c08:	f7fe f828 	bl	8000c5c <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe f824 	bl	8000c5c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1b5      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c22:	4b8b      	ldr	r3, [pc, #556]	@ (8002e50 <HAL_RCC_OscConfig+0x774>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002c3a:	4b84      	ldr	r3, [pc, #528]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4c:	497f      	ldr	r1, [pc, #508]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c60:	4b7a      	ldr	r3, [pc, #488]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	4a79      	ldr	r2, [pc, #484]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c70:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a75      	ldr	r2, [pc, #468]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c80:	e018      	b.n	8002cb4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c82:	4b72      	ldr	r3, [pc, #456]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	4a70      	ldr	r2, [pc, #448]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c94:	4b6d      	ldr	r3, [pc, #436]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ca4:	4b69      	ldr	r3, [pc, #420]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	4a68      	ldr	r2, [pc, #416]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d016      	beq.n	8002cea <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fd ffce 	bl	8000c5c <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fd ffca 	bl	8000c5c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e159      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	4b5c      	ldr	r3, [pc, #368]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ed      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x5e8>
 8002ce8:	e01d      	b.n	8002d26 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fd ffb7 	bl	8000c5c <HAL_GetTick>
 8002cee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fd ffb3 	bl	8000c5c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e142      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ed      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002d16:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b47      	ldr	r3, [pc, #284]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	4a46      	ldr	r2, [pc, #280]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d54:	4a3d      	ldr	r2, [pc, #244]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fd ff7d 	bl	8000c5c <HAL_GetTick>
 8002d62:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d66:	f7fd ff79 	bl	8000c5c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10a      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d78:	4b34      	ldr	r3, [pc, #208]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ef      	beq.n	8002d66 <HAL_RCC_OscConfig+0x68a>
 8002d86:	e01b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d88:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fd ff60 	bl	8000c5c <HAL_GetTick>
 8002d9c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da0:	f7fd ff5c 	bl	8000c5c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0ed      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db2:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ef      	bne.n	8002da0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80e1 	beq.w	8002f8c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	f040 80b5 	bne.w	8002f3e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d124      	bne.n	8002e32 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df2:	3b01      	subs	r3, #1
 8002df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d11b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d113      	bne.n	8002e32 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d05f      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d05a      	beq.n	8002eee <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a03      	ldr	r2, [pc, #12]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e44:	f7fd ff0a 	bl	8000c5c <HAL_GetTick>
 8002e48:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4a:	e00c      	b.n	8002e66 <HAL_RCC_OscConfig+0x78a>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fd ff02 	bl	8000c5c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e093      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	4b4c      	ldr	r3, [pc, #304]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	4b49      	ldr	r3, [pc, #292]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b49      	ldr	r3, [pc, #292]	@ (8002f9c <HAL_RCC_OscConfig+0x8c0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e8c:	0212      	lsls	r2, r2, #8
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e94:	0852      	lsrs	r2, r2, #1
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0552      	lsls	r2, r2, #21
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0652      	lsls	r2, r2, #25
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	493b      	ldr	r1, [pc, #236]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eae:	4b3a      	ldr	r3, [pc, #232]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a39      	ldr	r2, [pc, #228]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eba:	4b37      	ldr	r3, [pc, #220]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a36      	ldr	r2, [pc, #216]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002ec0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec6:	f7fd fec9 	bl	8000c5c <HAL_GetTick>
 8002eca:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fd fec5 	bl	8000c5c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e056      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eec:	e04e      	b.n	8002f8c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e04d      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d146      	bne.n	8002f8c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f0a:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f14:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f16:	f7fd fea1 	bl	8000c5c <HAL_GetTick>
 8002f1a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fd fe9d 	bl	8000c5c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e02e      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x842>
 8002f3c:	e026      	b.n	8002f8c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d021      	beq.n	8002f88 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fd fe84 	bl	8000c5c <HAL_GetTick>
 8002f54:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fd fe80 	bl	8000c5c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e011      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	@ (8002f98 <HAL_RCC_OscConfig+0x8bc>)
 8002f7c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002f80:	f023 0303 	bic.w	r3, r3, #3
 8002f84:	60d3      	str	r3, [r2, #12]
 8002f86:	e001      	b.n	8002f8c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3728      	adds	r7, #40	@ 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	f99f808c 	.word	0xf99f808c

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0e7      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b75      	ldr	r3, [pc, #468]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d910      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b72      	ldr	r3, [pc, #456]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4970      	ldr	r1, [pc, #448]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0cf      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d908      	bls.n	8003012 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4960      	ldr	r1, [pc, #384]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d04c      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b5a      	ldr	r3, [pc, #360]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d121      	bne.n	8003076 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0a6      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303e:	4b54      	ldr	r3, [pc, #336]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d115      	bne.n	8003076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e09a      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003056:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e08e      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003066:	4b4a      	ldr	r3, [pc, #296]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e086      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b46      	ldr	r3, [pc, #280]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4943      	ldr	r1, [pc, #268]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fd fde8 	bl	8000c5c <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fd fde4 	bl	8000c5c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e06e      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d208      	bcs.n	80030e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	492b      	ldr	r1, [pc, #172]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d210      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f4:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	4923      	ldr	r1, [pc, #140]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCC_ClockConfig+0x1ec>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e036      	b.n	8003184 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4918      	ldr	r1, [pc, #96]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4910      	ldr	r1, [pc, #64]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003154:	f000 f824 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <HAL_RCC_ClockConfig+0x1f0>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	490b      	ldr	r1, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x1f4>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_RCC_ClockConfig+0x1f8>)
 8003172:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003174:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1fc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fd1f 	bl	8000bbc <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	72fb      	strb	r3, [r7, #11]

  return status;
 8003182:	7afb      	ldrb	r3, [r7, #11]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	08004b10 	.word	0x08004b10
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	@ 0x24
 80031a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b8:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x34>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11e      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031d4:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031e0:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e005      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031f0:	4b2d      	ldr	r3, [pc, #180]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031fc:	4a2b      	ldr	r2, [pc, #172]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003204:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10d      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d102      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003218:	4b25      	ldr	r3, [pc, #148]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	e004      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d101      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003224:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003226:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d134      	bne.n	8003298 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0xa6>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d003      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0xac>
 8003244:	e005      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003248:	617b      	str	r3, [r7, #20]
      break;
 800324a:	e005      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800324e:	617b      	str	r3, [r7, #20]
      break;
 8003250:	e002      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	617b      	str	r3, [r7, #20]
      break;
 8003256:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	3301      	adds	r3, #1
 8003264:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	0e5b      	lsrs	r3, r3, #25
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	3301      	adds	r3, #1
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003298:	69bb      	ldr	r3, [r7, #24]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08004b28 	.word	0x08004b28
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	007a1200 	.word	0x007a1200

080032b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000000 	.word	0x20000000

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4904      	ldr	r1, [pc, #16]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08004b20 	.word	0x08004b20

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003300:	f7ff ffda 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0adb      	lsrs	r3, r3, #11
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4904      	ldr	r1, [pc, #16]	@ (8003324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	08004b20 	.word	0x08004b20

08003328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003334:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003340:	f7ff f968 	bl	8002614 <HAL_PWREx_GetVoltageRange>
 8003344:	6178      	str	r0, [r7, #20]
 8003346:	e014      	b.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	4a24      	ldr	r2, [pc, #144]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	@ 0x58
 8003354:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003360:	f7ff f958 	bl	8002614 <HAL_PWREx_GetVoltageRange>
 8003364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003378:	d10b      	bne.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b80      	cmp	r3, #128	@ 0x80
 800337e:	d919      	bls.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2ba0      	cmp	r3, #160	@ 0xa0
 8003384:	d902      	bls.n	800338c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003386:	2302      	movs	r3, #2
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e013      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e010      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	d902      	bls.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003398:	2303      	movs	r3, #3
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e00a      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	@ 0x80
 80033a2:	d102      	bne.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033a4:	2302      	movs	r3, #2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e004      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b70      	cmp	r3, #112	@ 0x70
 80033ae:	d101      	bne.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0207 	bic.w	r2, r3, #7
 80033bc:	4909      	ldr	r1, [pc, #36]	@ (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033c4:	4b07      	ldr	r3, [pc, #28]	@ (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40022000 	.word	0x40022000

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f0:	2300      	movs	r3, #0
 80033f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033f4:	2300      	movs	r3, #0
 80033f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 809e 	beq.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800340a:	4b46      	ldr	r3, [pc, #280]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b40      	ldr	r3, [pc, #256]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	4a3f      	ldr	r2, [pc, #252]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	@ 0x58
 800342c:	4b3d      	ldr	r3, [pc, #244]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003438:	2301      	movs	r3, #1
 800343a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343c:	4b3a      	ldr	r3, [pc, #232]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a39      	ldr	r2, [pc, #228]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003448:	f7fd fc08 	bl	8000c5c <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7fd fc04 	bl	8000c5c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d902      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	74fb      	strb	r3, [r7, #19]
        break;
 8003462:	e005      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003464:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d15a      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003476:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003480:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	d019      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003492:	4b24      	ldr	r3, [pc, #144]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800349e:	4b21      	ldr	r3, [pc, #132]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034be:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd fbc4 	bl	8000c5c <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	e00b      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fbc0 	bl	8000c5c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d902      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	74fb      	strb	r3, [r7, #19]
            break;
 80034ee:	e006      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ec      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003504:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	4904      	ldr	r1, [pc, #16]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800351a:	e009      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
 8003520:	e006      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003530:	7c7b      	ldrb	r3, [r7, #17]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003536:	4b6e      	ldr	r3, [pc, #440]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	4a6d      	ldr	r2, [pc, #436]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800353c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354e:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f023 0203 	bic.w	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4964      	ldr	r1, [pc, #400]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003570:	4b5f      	ldr	r3, [pc, #380]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f023 020c 	bic.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	495c      	ldr	r1, [pc, #368]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003592:	4b57      	ldr	r3, [pc, #348]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4953      	ldr	r1, [pc, #332]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b4:	4b4e      	ldr	r3, [pc, #312]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	494b      	ldr	r1, [pc, #300]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	4b46      	ldr	r3, [pc, #280]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4942      	ldr	r1, [pc, #264]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f8:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	493a      	ldr	r1, [pc, #232]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361a:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4931      	ldr	r1, [pc, #196]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800363c:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	4929      	ldr	r1, [pc, #164]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	4920      	ldr	r1, [pc, #128]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	4918      	ldr	r1, [pc, #96]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a12      	ldr	r2, [pc, #72]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	490a      	ldr	r1, [pc, #40]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d6:	d105      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a04      	ldr	r2, [pc, #16]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e040      	b.n	80037a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd f91c 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fb0c 	bl	8003d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8af 	bl	80038c4 <UART_SetConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e01b      	b.n	80037a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800377e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800378e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb8b 	bl	8003ebc <UART_CheckIdleState>
 80037a6:	4603      	mov	r3, r0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	@ 0x28
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d177      	bne.n	80038b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_UART_Transmit+0x24>
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e070      	b.n	80038ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2221      	movs	r2, #33	@ 0x21
 80037e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e6:	f7fd fa39 	bl	8000c5c <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003804:	d108      	bne.n	8003818 <HAL_UART_Transmit+0x68>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e003      	b.n	8003820 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003820:	e02f      	b.n	8003882 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	@ 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fbed 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e03b      	b.n	80038ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003854:	b292      	uxth	r2, r2
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	3302      	adds	r3, #2
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e007      	b.n	8003870 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1c9      	bne.n	8003822 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2140      	movs	r1, #64	@ 0x40
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fbb7 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e005      	b.n	80038ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b08a      	sub	sp, #40	@ 0x28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b9e      	ldr	r3, [pc, #632]	@ (8003b6c <UART_SetConfig+0x2a8>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a93      	ldr	r2, [pc, #588]	@ (8003b70 <UART_SetConfig+0x2ac>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	4313      	orrs	r3, r2
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a8a      	ldr	r2, [pc, #552]	@ (8003b74 <UART_SetConfig+0x2b0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d126      	bne.n	800399c <UART_SetConfig+0xd8>
 800394e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b78 <UART_SetConfig+0x2b4>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b03      	cmp	r3, #3
 800395a:	d81b      	bhi.n	8003994 <UART_SetConfig+0xd0>
 800395c:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <UART_SetConfig+0xa0>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003985 	.word	0x08003985
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398d 	.word	0x0800398d
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397a:	e0ab      	b.n	8003ad4 <UART_SetConfig+0x210>
 800397c:	2302      	movs	r3, #2
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003982:	e0a7      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003984:	2304      	movs	r3, #4
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398a:	e0a3      	b.n	8003ad4 <UART_SetConfig+0x210>
 800398c:	2308      	movs	r3, #8
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003992:	e09f      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003994:	2310      	movs	r3, #16
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399a:	e09b      	b.n	8003ad4 <UART_SetConfig+0x210>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a76      	ldr	r2, [pc, #472]	@ (8003b7c <UART_SetConfig+0x2b8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d138      	bne.n	8003a18 <UART_SetConfig+0x154>
 80039a6:	4b74      	ldr	r3, [pc, #464]	@ (8003b78 <UART_SetConfig+0x2b4>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d82d      	bhi.n	8003a10 <UART_SetConfig+0x14c>
 80039b4:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0xf8>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003a11 	.word	0x08003a11
 80039c4:	08003a11 	.word	0x08003a11
 80039c8:	08003a11 	.word	0x08003a11
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a11 	.word	0x08003a11
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	080039f9 	.word	0x080039f9
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f6:	e06d      	b.n	8003ad4 <UART_SetConfig+0x210>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fe:	e069      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a06:	e065      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0e:	e061      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a16:	e05d      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a58      	ldr	r2, [pc, #352]	@ (8003b80 <UART_SetConfig+0x2bc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d125      	bne.n	8003a6e <UART_SetConfig+0x1aa>
 8003a22:	4b55      	ldr	r3, [pc, #340]	@ (8003b78 <UART_SetConfig+0x2b4>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a2c:	2b30      	cmp	r3, #48	@ 0x30
 8003a2e:	d016      	beq.n	8003a5e <UART_SetConfig+0x19a>
 8003a30:	2b30      	cmp	r3, #48	@ 0x30
 8003a32:	d818      	bhi.n	8003a66 <UART_SetConfig+0x1a2>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d00a      	beq.n	8003a4e <UART_SetConfig+0x18a>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d814      	bhi.n	8003a66 <UART_SetConfig+0x1a2>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <UART_SetConfig+0x182>
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d008      	beq.n	8003a56 <UART_SetConfig+0x192>
 8003a44:	e00f      	b.n	8003a66 <UART_SetConfig+0x1a2>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4c:	e042      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a54:	e03e      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a56:	2304      	movs	r3, #4
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5c:	e03a      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a64:	e036      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a66:	2310      	movs	r3, #16
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6c:	e032      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3f      	ldr	r2, [pc, #252]	@ (8003b70 <UART_SetConfig+0x2ac>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d12a      	bne.n	8003ace <UART_SetConfig+0x20a>
 8003a78:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <UART_SetConfig+0x2b4>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a86:	d01a      	beq.n	8003abe <UART_SetConfig+0x1fa>
 8003a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8c:	d81b      	bhi.n	8003ac6 <UART_SetConfig+0x202>
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a92:	d00c      	beq.n	8003aae <UART_SetConfig+0x1ea>
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a98:	d815      	bhi.n	8003ac6 <UART_SetConfig+0x202>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <UART_SetConfig+0x1e2>
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d008      	beq.n	8003ab6 <UART_SetConfig+0x1f2>
 8003aa4:	e00f      	b.n	8003ac6 <UART_SetConfig+0x202>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aac:	e012      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab4:	e00e      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003abc:	e00a      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac4:	e006      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003acc:	e002      	b.n	8003ad4 <UART_SetConfig+0x210>
 8003ace:	2310      	movs	r3, #16
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <UART_SetConfig+0x2ac>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f040 808a 	bne.w	8003bf4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d824      	bhi.n	8003b32 <UART_SetConfig+0x26e>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <UART_SetConfig+0x22c>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b23 	.word	0x08003b23
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b33 	.word	0x08003b33
 8003b10:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7ff fbdc 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e010      	b.n	8003b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <UART_SetConfig+0x2c0>)
 8003b1e:	61fb      	str	r3, [r7, #28]
        break;
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7ff fb3d 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003b26:	61f8      	str	r0, [r7, #28]
        break;
 8003b28:	e009      	b.n	8003b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e005      	b.n	8003b3e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8109 	beq.w	8003d58 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d305      	bcc.n	8003b62 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d912      	bls.n	8003b88 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b68:	e0f6      	b.n	8003d58 <UART_SetConfig+0x494>
 8003b6a:	bf00      	nop
 8003b6c:	efff69f3 	.word	0xefff69f3
 8003b70:	40008000 	.word	0x40008000
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40004800 	.word	0x40004800
 8003b84:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	4615      	mov	r5, r2
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	022b      	lsls	r3, r5, #8
 8003b9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b9e:	0222      	lsls	r2, r4, #8
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	6849      	ldr	r1, [r1, #4]
 8003ba4:	0849      	lsrs	r1, r1, #1
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	4688      	mov	r8, r1
 8003baa:	4681      	mov	r9, r0
 8003bac:	eb12 0a08 	adds.w	sl, r2, r8
 8003bb0:	eb43 0b09 	adc.w	fp, r3, r9
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc2:	4650      	mov	r0, sl
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	f7fc fb5b 	bl	8000280 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd8:	d308      	bcc.n	8003bec <UART_SetConfig+0x328>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003be0:	d204      	bcs.n	8003bec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e0b5      	b.n	8003d58 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bf2:	e0b1      	b.n	8003d58 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bfc:	d15d      	bne.n	8003cba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d827      	bhi.n	8003c56 <UART_SetConfig+0x392>
 8003c06:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <UART_SetConfig+0x348>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c57 	.word	0x08003c57
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7ff fb4e 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003c34:	61f8      	str	r0, [r7, #28]
        break;
 8003c36:	e014      	b.n	8003c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7ff fb60 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003c3c:	61f8      	str	r0, [r7, #28]
        break;
 8003c3e:	e010      	b.n	8003c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c40:	4b4c      	ldr	r3, [pc, #304]	@ (8003d74 <UART_SetConfig+0x4b0>)
 8003c42:	61fb      	str	r3, [r7, #28]
        break;
 8003c44:	e00d      	b.n	8003c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c46:	f7ff faab 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003c4a:	61f8      	str	r0, [r7, #28]
        break;
 8003c4c:	e009      	b.n	8003c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c52:	61fb      	str	r3, [r7, #28]
        break;
 8003c54:	e005      	b.n	8003c62 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d077      	beq.n	8003d58 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005a      	lsls	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b0f      	cmp	r3, #15
 8003c82:	d916      	bls.n	8003cb2 <UART_SetConfig+0x3ee>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8a:	d212      	bcs.n	8003cb2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f023 030f 	bic.w	r3, r3, #15
 8003c94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	8afb      	ldrh	r3, [r7, #22]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	8afa      	ldrh	r2, [r7, #22]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e052      	b.n	8003d58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cb8:	e04e      	b.n	8003d58 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d827      	bhi.n	8003d12 <UART_SetConfig+0x44e>
 8003cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0x404>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff faf0 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	61f8      	str	r0, [r7, #28]
        break;
 8003cf2:	e014      	b.n	8003d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7ff fb02 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003cf8:	61f8      	str	r0, [r7, #28]
        break;
 8003cfa:	e010      	b.n	8003d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d74 <UART_SetConfig+0x4b0>)
 8003cfe:	61fb      	str	r3, [r7, #28]
        break;
 8003d00:	e00d      	b.n	8003d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7ff fa4d 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003d06:	61f8      	str	r0, [r7, #28]
        break;
 8003d08:	e009      	b.n	8003d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d0e:	61fb      	str	r3, [r7, #28]
        break;
 8003d10:	e005      	b.n	8003d1e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	085a      	lsrs	r2, r3, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d909      	bls.n	8003d52 <UART_SetConfig+0x48e>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d44:	d205      	bcs.n	8003d52 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e002      	b.n	8003d58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3728      	adds	r7, #40	@ 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	00f42400 	.word	0x00f42400

08003d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01a      	beq.n	8003e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d10a      	bne.n	8003e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b098      	sub	sp, #96	@ 0x60
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ecc:	f7fc fec6 	bl	8000c5c <HAL_GetTick>
 8003ed0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d12e      	bne.n	8003f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f88c 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d021      	beq.n	8003f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e062      	b.n	8004004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d149      	bne.n	8003fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f856 	bl	800400c <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03c      	beq.n	8003fe0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	623b      	str	r3, [r7, #32]
   return(result);
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e6      	bne.n	8003f66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb8:	61fa      	str	r2, [r7, #28]
 8003fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e011      	b.n	8004004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3758      	adds	r7, #88	@ 0x58
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401c:	e04f      	b.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d04b      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fc fe19 	bl	8000c5c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <UART_WaitOnFlagUntilTimeout+0x30>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e04e      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d037      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	d034      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	d031      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d110      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2208      	movs	r2, #8
 800406e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f838 	bl	80040e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2208      	movs	r2, #8
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e029      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004098:	d111      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f81e 	bl	80040e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00f      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d0a0      	beq.n	800401e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b095      	sub	sp, #84	@ 0x54
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410c:	643b      	str	r3, [r7, #64]	@ 0x40
 800410e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e6      	bne.n	80040ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004158:	2b01      	cmp	r3, #1
 800415a:	d118      	bne.n	800418e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	60bb      	str	r3, [r7, #8]
   return(result);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f023 0310 	bic.w	r3, r3, #16
 8004170:	647b      	str	r3, [r7, #68]	@ 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	613b      	str	r3, [r7, #16]
   return(result);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e6      	bne.n	800415c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041a2:	bf00      	nop
 80041a4:	3754      	adds	r7, #84	@ 0x54
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <siprintf>:
 80041b0:	b40e      	push	{r1, r2, r3}
 80041b2:	b500      	push	{lr}
 80041b4:	b09c      	sub	sp, #112	@ 0x70
 80041b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041b8:	9002      	str	r0, [sp, #8]
 80041ba:	9006      	str	r0, [sp, #24]
 80041bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041c0:	4809      	ldr	r0, [pc, #36]	@ (80041e8 <siprintf+0x38>)
 80041c2:	9107      	str	r1, [sp, #28]
 80041c4:	9104      	str	r1, [sp, #16]
 80041c6:	4909      	ldr	r1, [pc, #36]	@ (80041ec <siprintf+0x3c>)
 80041c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041cc:	9105      	str	r1, [sp, #20]
 80041ce:	6800      	ldr	r0, [r0, #0]
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	a902      	add	r1, sp, #8
 80041d4:	f000 f994 	bl	8004500 <_svfiprintf_r>
 80041d8:	9b02      	ldr	r3, [sp, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	b01c      	add	sp, #112	@ 0x70
 80041e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e4:	b003      	add	sp, #12
 80041e6:	4770      	bx	lr
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	ffff0208 	.word	0xffff0208

080041f0 <memset>:
 80041f0:	4402      	add	r2, r0
 80041f2:	4603      	mov	r3, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <__errno>:
 8004200:	4b01      	ldr	r3, [pc, #4]	@ (8004208 <__errno+0x8>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000000c 	.word	0x2000000c

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4d0d      	ldr	r5, [pc, #52]	@ (8004244 <__libc_init_array+0x38>)
 8004210:	4c0d      	ldr	r4, [pc, #52]	@ (8004248 <__libc_init_array+0x3c>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	2600      	movs	r6, #0
 8004218:	42a6      	cmp	r6, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	4d0b      	ldr	r5, [pc, #44]	@ (800424c <__libc_init_array+0x40>)
 800421e:	4c0c      	ldr	r4, [pc, #48]	@ (8004250 <__libc_init_array+0x44>)
 8004220:	f000 fc66 	bl	8004af0 <_init>
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	2600      	movs	r6, #0
 800422a:	42a6      	cmp	r6, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f855 3b04 	ldr.w	r3, [r5], #4
 8004234:	4798      	blx	r3
 8004236:	3601      	adds	r6, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f855 3b04 	ldr.w	r3, [r5], #4
 800423e:	4798      	blx	r3
 8004240:	3601      	adds	r6, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	08004b94 	.word	0x08004b94
 8004248:	08004b94 	.word	0x08004b94
 800424c:	08004b94 	.word	0x08004b94
 8004250:	08004b98 	.word	0x08004b98

08004254 <__retarget_lock_acquire_recursive>:
 8004254:	4770      	bx	lr

08004256 <__retarget_lock_release_recursive>:
 8004256:	4770      	bx	lr

08004258 <_free_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4605      	mov	r5, r0
 800425c:	2900      	cmp	r1, #0
 800425e:	d041      	beq.n	80042e4 <_free_r+0x8c>
 8004260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004264:	1f0c      	subs	r4, r1, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	bfb8      	it	lt
 800426a:	18e4      	addlt	r4, r4, r3
 800426c:	f000 f8e0 	bl	8004430 <__malloc_lock>
 8004270:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <_free_r+0x90>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	b933      	cbnz	r3, 8004284 <_free_r+0x2c>
 8004276:	6063      	str	r3, [r4, #4]
 8004278:	6014      	str	r4, [r2, #0]
 800427a:	4628      	mov	r0, r5
 800427c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004280:	f000 b8dc 	b.w	800443c <__malloc_unlock>
 8004284:	42a3      	cmp	r3, r4
 8004286:	d908      	bls.n	800429a <_free_r+0x42>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	1821      	adds	r1, r4, r0
 800428c:	428b      	cmp	r3, r1
 800428e:	bf01      	itttt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	1809      	addeq	r1, r1, r0
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	e7ed      	b.n	8004276 <_free_r+0x1e>
 800429a:	461a      	mov	r2, r3
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b10b      	cbz	r3, 80042a4 <_free_r+0x4c>
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d9fa      	bls.n	800429a <_free_r+0x42>
 80042a4:	6811      	ldr	r1, [r2, #0]
 80042a6:	1850      	adds	r0, r2, r1
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	d10b      	bne.n	80042c4 <_free_r+0x6c>
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	4401      	add	r1, r0
 80042b0:	1850      	adds	r0, r2, r1
 80042b2:	4283      	cmp	r3, r0
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	d1e0      	bne.n	800427a <_free_r+0x22>
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	6053      	str	r3, [r2, #4]
 80042be:	4408      	add	r0, r1
 80042c0:	6010      	str	r0, [r2, #0]
 80042c2:	e7da      	b.n	800427a <_free_r+0x22>
 80042c4:	d902      	bls.n	80042cc <_free_r+0x74>
 80042c6:	230c      	movs	r3, #12
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	e7d6      	b.n	800427a <_free_r+0x22>
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	1821      	adds	r1, r4, r0
 80042d0:	428b      	cmp	r3, r1
 80042d2:	bf04      	itt	eq
 80042d4:	6819      	ldreq	r1, [r3, #0]
 80042d6:	685b      	ldreq	r3, [r3, #4]
 80042d8:	6063      	str	r3, [r4, #4]
 80042da:	bf04      	itt	eq
 80042dc:	1809      	addeq	r1, r1, r0
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	6054      	str	r4, [r2, #4]
 80042e2:	e7ca      	b.n	800427a <_free_r+0x22>
 80042e4:	bd38      	pop	{r3, r4, r5, pc}
 80042e6:	bf00      	nop
 80042e8:	200002b0 	.word	0x200002b0

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0f      	ldr	r6, [pc, #60]	@ (800432c <sbrk_aligned+0x40>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f000 fba6 	bl	8004a48 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 fba1 	bl	8004a48 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d103      	bne.n	8004312 <sbrk_aligned+0x26>
 800430a:	f04f 34ff 	mov.w	r4, #4294967295
 800430e:	4620      	mov	r0, r4
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	1cc4      	adds	r4, r0, #3
 8004314:	f024 0403 	bic.w	r4, r4, #3
 8004318:	42a0      	cmp	r0, r4
 800431a:	d0f8      	beq.n	800430e <sbrk_aligned+0x22>
 800431c:	1a21      	subs	r1, r4, r0
 800431e:	4628      	mov	r0, r5
 8004320:	f000 fb92 	bl	8004a48 <_sbrk_r>
 8004324:	3001      	adds	r0, #1
 8004326:	d1f2      	bne.n	800430e <sbrk_aligned+0x22>
 8004328:	e7ef      	b.n	800430a <sbrk_aligned+0x1e>
 800432a:	bf00      	nop
 800432c:	200002ac 	.word	0x200002ac

08004330 <_malloc_r>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	1ccd      	adds	r5, r1, #3
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	2d00      	cmp	r5, #0
 8004344:	4606      	mov	r6, r0
 8004346:	db01      	blt.n	800434c <_malloc_r+0x1c>
 8004348:	42a9      	cmp	r1, r5
 800434a:	d904      	bls.n	8004356 <_malloc_r+0x26>
 800434c:	230c      	movs	r3, #12
 800434e:	6033      	str	r3, [r6, #0]
 8004350:	2000      	movs	r0, #0
 8004352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800442c <_malloc_r+0xfc>
 800435a:	f000 f869 	bl	8004430 <__malloc_lock>
 800435e:	f8d8 3000 	ldr.w	r3, [r8]
 8004362:	461c      	mov	r4, r3
 8004364:	bb44      	cbnz	r4, 80043b8 <_malloc_r+0x88>
 8004366:	4629      	mov	r1, r5
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff ffbf 	bl	80042ec <sbrk_aligned>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	4604      	mov	r4, r0
 8004372:	d158      	bne.n	8004426 <_malloc_r+0xf6>
 8004374:	f8d8 4000 	ldr.w	r4, [r8]
 8004378:	4627      	mov	r7, r4
 800437a:	2f00      	cmp	r7, #0
 800437c:	d143      	bne.n	8004406 <_malloc_r+0xd6>
 800437e:	2c00      	cmp	r4, #0
 8004380:	d04b      	beq.n	800441a <_malloc_r+0xea>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	4639      	mov	r1, r7
 8004386:	4630      	mov	r0, r6
 8004388:	eb04 0903 	add.w	r9, r4, r3
 800438c:	f000 fb5c 	bl	8004a48 <_sbrk_r>
 8004390:	4581      	cmp	r9, r0
 8004392:	d142      	bne.n	800441a <_malloc_r+0xea>
 8004394:	6821      	ldr	r1, [r4, #0]
 8004396:	1a6d      	subs	r5, r5, r1
 8004398:	4629      	mov	r1, r5
 800439a:	4630      	mov	r0, r6
 800439c:	f7ff ffa6 	bl	80042ec <sbrk_aligned>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d03a      	beq.n	800441a <_malloc_r+0xea>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	442b      	add	r3, r5
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	f8d8 3000 	ldr.w	r3, [r8]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	bb62      	cbnz	r2, 800440c <_malloc_r+0xdc>
 80043b2:	f8c8 7000 	str.w	r7, [r8]
 80043b6:	e00f      	b.n	80043d8 <_malloc_r+0xa8>
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	1b52      	subs	r2, r2, r5
 80043bc:	d420      	bmi.n	8004400 <_malloc_r+0xd0>
 80043be:	2a0b      	cmp	r2, #11
 80043c0:	d917      	bls.n	80043f2 <_malloc_r+0xc2>
 80043c2:	1961      	adds	r1, r4, r5
 80043c4:	42a3      	cmp	r3, r4
 80043c6:	6025      	str	r5, [r4, #0]
 80043c8:	bf18      	it	ne
 80043ca:	6059      	strne	r1, [r3, #4]
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	bf08      	it	eq
 80043d0:	f8c8 1000 	streq.w	r1, [r8]
 80043d4:	5162      	str	r2, [r4, r5]
 80043d6:	604b      	str	r3, [r1, #4]
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 f82f 	bl	800443c <__malloc_unlock>
 80043de:	f104 000b 	add.w	r0, r4, #11
 80043e2:	1d23      	adds	r3, r4, #4
 80043e4:	f020 0007 	bic.w	r0, r0, #7
 80043e8:	1ac2      	subs	r2, r0, r3
 80043ea:	bf1c      	itt	ne
 80043ec:	1a1b      	subne	r3, r3, r0
 80043ee:	50a3      	strne	r3, [r4, r2]
 80043f0:	e7af      	b.n	8004352 <_malloc_r+0x22>
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	bf0c      	ite	eq
 80043f8:	f8c8 2000 	streq.w	r2, [r8]
 80043fc:	605a      	strne	r2, [r3, #4]
 80043fe:	e7eb      	b.n	80043d8 <_malloc_r+0xa8>
 8004400:	4623      	mov	r3, r4
 8004402:	6864      	ldr	r4, [r4, #4]
 8004404:	e7ae      	b.n	8004364 <_malloc_r+0x34>
 8004406:	463c      	mov	r4, r7
 8004408:	687f      	ldr	r7, [r7, #4]
 800440a:	e7b6      	b.n	800437a <_malloc_r+0x4a>
 800440c:	461a      	mov	r2, r3
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	42a3      	cmp	r3, r4
 8004412:	d1fb      	bne.n	800440c <_malloc_r+0xdc>
 8004414:	2300      	movs	r3, #0
 8004416:	6053      	str	r3, [r2, #4]
 8004418:	e7de      	b.n	80043d8 <_malloc_r+0xa8>
 800441a:	230c      	movs	r3, #12
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	4630      	mov	r0, r6
 8004420:	f000 f80c 	bl	800443c <__malloc_unlock>
 8004424:	e794      	b.n	8004350 <_malloc_r+0x20>
 8004426:	6005      	str	r5, [r0, #0]
 8004428:	e7d6      	b.n	80043d8 <_malloc_r+0xa8>
 800442a:	bf00      	nop
 800442c:	200002b0 	.word	0x200002b0

08004430 <__malloc_lock>:
 8004430:	4801      	ldr	r0, [pc, #4]	@ (8004438 <__malloc_lock+0x8>)
 8004432:	f7ff bf0f 	b.w	8004254 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	200002a8 	.word	0x200002a8

0800443c <__malloc_unlock>:
 800443c:	4801      	ldr	r0, [pc, #4]	@ (8004444 <__malloc_unlock+0x8>)
 800443e:	f7ff bf0a 	b.w	8004256 <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	200002a8 	.word	0x200002a8

08004448 <__ssputs_r>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	688e      	ldr	r6, [r1, #8]
 800444e:	461f      	mov	r7, r3
 8004450:	42be      	cmp	r6, r7
 8004452:	680b      	ldr	r3, [r1, #0]
 8004454:	4682      	mov	sl, r0
 8004456:	460c      	mov	r4, r1
 8004458:	4690      	mov	r8, r2
 800445a:	d82d      	bhi.n	80044b8 <__ssputs_r+0x70>
 800445c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004460:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004464:	d026      	beq.n	80044b4 <__ssputs_r+0x6c>
 8004466:	6965      	ldr	r5, [r4, #20]
 8004468:	6909      	ldr	r1, [r1, #16]
 800446a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800446e:	eba3 0901 	sub.w	r9, r3, r1
 8004472:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004476:	1c7b      	adds	r3, r7, #1
 8004478:	444b      	add	r3, r9
 800447a:	106d      	asrs	r5, r5, #1
 800447c:	429d      	cmp	r5, r3
 800447e:	bf38      	it	cc
 8004480:	461d      	movcc	r5, r3
 8004482:	0553      	lsls	r3, r2, #21
 8004484:	d527      	bpl.n	80044d6 <__ssputs_r+0x8e>
 8004486:	4629      	mov	r1, r5
 8004488:	f7ff ff52 	bl	8004330 <_malloc_r>
 800448c:	4606      	mov	r6, r0
 800448e:	b360      	cbz	r0, 80044ea <__ssputs_r+0xa2>
 8004490:	6921      	ldr	r1, [r4, #16]
 8004492:	464a      	mov	r2, r9
 8004494:	f000 fae8 	bl	8004a68 <memcpy>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800449e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	6126      	str	r6, [r4, #16]
 80044a6:	6165      	str	r5, [r4, #20]
 80044a8:	444e      	add	r6, r9
 80044aa:	eba5 0509 	sub.w	r5, r5, r9
 80044ae:	6026      	str	r6, [r4, #0]
 80044b0:	60a5      	str	r5, [r4, #8]
 80044b2:	463e      	mov	r6, r7
 80044b4:	42be      	cmp	r6, r7
 80044b6:	d900      	bls.n	80044ba <__ssputs_r+0x72>
 80044b8:	463e      	mov	r6, r7
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	4632      	mov	r2, r6
 80044be:	4641      	mov	r1, r8
 80044c0:	f000 faa8 	bl	8004a14 <memmove>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	1b9b      	subs	r3, r3, r6
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	4433      	add	r3, r6
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d6:	462a      	mov	r2, r5
 80044d8:	f000 fad4 	bl	8004a84 <_realloc_r>
 80044dc:	4606      	mov	r6, r0
 80044de:	2800      	cmp	r0, #0
 80044e0:	d1e0      	bne.n	80044a4 <__ssputs_r+0x5c>
 80044e2:	6921      	ldr	r1, [r4, #16]
 80044e4:	4650      	mov	r0, sl
 80044e6:	f7ff feb7 	bl	8004258 <_free_r>
 80044ea:	230c      	movs	r3, #12
 80044ec:	f8ca 3000 	str.w	r3, [sl]
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	e7e9      	b.n	80044d2 <__ssputs_r+0x8a>
	...

08004500 <_svfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	4698      	mov	r8, r3
 8004506:	898b      	ldrh	r3, [r1, #12]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	b09d      	sub	sp, #116	@ 0x74
 800450c:	4607      	mov	r7, r0
 800450e:	460d      	mov	r5, r1
 8004510:	4614      	mov	r4, r2
 8004512:	d510      	bpl.n	8004536 <_svfiprintf_r+0x36>
 8004514:	690b      	ldr	r3, [r1, #16]
 8004516:	b973      	cbnz	r3, 8004536 <_svfiprintf_r+0x36>
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	f7ff ff09 	bl	8004330 <_malloc_r>
 800451e:	6028      	str	r0, [r5, #0]
 8004520:	6128      	str	r0, [r5, #16]
 8004522:	b930      	cbnz	r0, 8004532 <_svfiprintf_r+0x32>
 8004524:	230c      	movs	r3, #12
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	b01d      	add	sp, #116	@ 0x74
 800452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004532:	2340      	movs	r3, #64	@ 0x40
 8004534:	616b      	str	r3, [r5, #20]
 8004536:	2300      	movs	r3, #0
 8004538:	9309      	str	r3, [sp, #36]	@ 0x24
 800453a:	2320      	movs	r3, #32
 800453c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004540:	f8cd 800c 	str.w	r8, [sp, #12]
 8004544:	2330      	movs	r3, #48	@ 0x30
 8004546:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046e4 <_svfiprintf_r+0x1e4>
 800454a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800454e:	f04f 0901 	mov.w	r9, #1
 8004552:	4623      	mov	r3, r4
 8004554:	469a      	mov	sl, r3
 8004556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800455a:	b10a      	cbz	r2, 8004560 <_svfiprintf_r+0x60>
 800455c:	2a25      	cmp	r2, #37	@ 0x25
 800455e:	d1f9      	bne.n	8004554 <_svfiprintf_r+0x54>
 8004560:	ebba 0b04 	subs.w	fp, sl, r4
 8004564:	d00b      	beq.n	800457e <_svfiprintf_r+0x7e>
 8004566:	465b      	mov	r3, fp
 8004568:	4622      	mov	r2, r4
 800456a:	4629      	mov	r1, r5
 800456c:	4638      	mov	r0, r7
 800456e:	f7ff ff6b 	bl	8004448 <__ssputs_r>
 8004572:	3001      	adds	r0, #1
 8004574:	f000 80a7 	beq.w	80046c6 <_svfiprintf_r+0x1c6>
 8004578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800457a:	445a      	add	r2, fp
 800457c:	9209      	str	r2, [sp, #36]	@ 0x24
 800457e:	f89a 3000 	ldrb.w	r3, [sl]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 809f 	beq.w	80046c6 <_svfiprintf_r+0x1c6>
 8004588:	2300      	movs	r3, #0
 800458a:	f04f 32ff 	mov.w	r2, #4294967295
 800458e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004592:	f10a 0a01 	add.w	sl, sl, #1
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	9307      	str	r3, [sp, #28]
 800459a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800459e:	931a      	str	r3, [sp, #104]	@ 0x68
 80045a0:	4654      	mov	r4, sl
 80045a2:	2205      	movs	r2, #5
 80045a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a8:	484e      	ldr	r0, [pc, #312]	@ (80046e4 <_svfiprintf_r+0x1e4>)
 80045aa:	f7fb fe19 	bl	80001e0 <memchr>
 80045ae:	9a04      	ldr	r2, [sp, #16]
 80045b0:	b9d8      	cbnz	r0, 80045ea <_svfiprintf_r+0xea>
 80045b2:	06d0      	lsls	r0, r2, #27
 80045b4:	bf44      	itt	mi
 80045b6:	2320      	movmi	r3, #32
 80045b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045bc:	0711      	lsls	r1, r2, #28
 80045be:	bf44      	itt	mi
 80045c0:	232b      	movmi	r3, #43	@ 0x2b
 80045c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045c6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80045cc:	d015      	beq.n	80045fa <_svfiprintf_r+0xfa>
 80045ce:	9a07      	ldr	r2, [sp, #28]
 80045d0:	4654      	mov	r4, sl
 80045d2:	2000      	movs	r0, #0
 80045d4:	f04f 0c0a 	mov.w	ip, #10
 80045d8:	4621      	mov	r1, r4
 80045da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045de:	3b30      	subs	r3, #48	@ 0x30
 80045e0:	2b09      	cmp	r3, #9
 80045e2:	d94b      	bls.n	800467c <_svfiprintf_r+0x17c>
 80045e4:	b1b0      	cbz	r0, 8004614 <_svfiprintf_r+0x114>
 80045e6:	9207      	str	r2, [sp, #28]
 80045e8:	e014      	b.n	8004614 <_svfiprintf_r+0x114>
 80045ea:	eba0 0308 	sub.w	r3, r0, r8
 80045ee:	fa09 f303 	lsl.w	r3, r9, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	9304      	str	r3, [sp, #16]
 80045f6:	46a2      	mov	sl, r4
 80045f8:	e7d2      	b.n	80045a0 <_svfiprintf_r+0xa0>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	1d19      	adds	r1, r3, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	9103      	str	r1, [sp, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfbb      	ittet	lt
 8004606:	425b      	neglt	r3, r3
 8004608:	f042 0202 	orrlt.w	r2, r2, #2
 800460c:	9307      	strge	r3, [sp, #28]
 800460e:	9307      	strlt	r3, [sp, #28]
 8004610:	bfb8      	it	lt
 8004612:	9204      	strlt	r2, [sp, #16]
 8004614:	7823      	ldrb	r3, [r4, #0]
 8004616:	2b2e      	cmp	r3, #46	@ 0x2e
 8004618:	d10a      	bne.n	8004630 <_svfiprintf_r+0x130>
 800461a:	7863      	ldrb	r3, [r4, #1]
 800461c:	2b2a      	cmp	r3, #42	@ 0x2a
 800461e:	d132      	bne.n	8004686 <_svfiprintf_r+0x186>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800462c:	3402      	adds	r4, #2
 800462e:	9305      	str	r3, [sp, #20]
 8004630:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046f4 <_svfiprintf_r+0x1f4>
 8004634:	7821      	ldrb	r1, [r4, #0]
 8004636:	2203      	movs	r2, #3
 8004638:	4650      	mov	r0, sl
 800463a:	f7fb fdd1 	bl	80001e0 <memchr>
 800463e:	b138      	cbz	r0, 8004650 <_svfiprintf_r+0x150>
 8004640:	9b04      	ldr	r3, [sp, #16]
 8004642:	eba0 000a 	sub.w	r0, r0, sl
 8004646:	2240      	movs	r2, #64	@ 0x40
 8004648:	4082      	lsls	r2, r0
 800464a:	4313      	orrs	r3, r2
 800464c:	3401      	adds	r4, #1
 800464e:	9304      	str	r3, [sp, #16]
 8004650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004654:	4824      	ldr	r0, [pc, #144]	@ (80046e8 <_svfiprintf_r+0x1e8>)
 8004656:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800465a:	2206      	movs	r2, #6
 800465c:	f7fb fdc0 	bl	80001e0 <memchr>
 8004660:	2800      	cmp	r0, #0
 8004662:	d036      	beq.n	80046d2 <_svfiprintf_r+0x1d2>
 8004664:	4b21      	ldr	r3, [pc, #132]	@ (80046ec <_svfiprintf_r+0x1ec>)
 8004666:	bb1b      	cbnz	r3, 80046b0 <_svfiprintf_r+0x1b0>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	3307      	adds	r3, #7
 800466c:	f023 0307 	bic.w	r3, r3, #7
 8004670:	3308      	adds	r3, #8
 8004672:	9303      	str	r3, [sp, #12]
 8004674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004676:	4433      	add	r3, r6
 8004678:	9309      	str	r3, [sp, #36]	@ 0x24
 800467a:	e76a      	b.n	8004552 <_svfiprintf_r+0x52>
 800467c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004680:	460c      	mov	r4, r1
 8004682:	2001      	movs	r0, #1
 8004684:	e7a8      	b.n	80045d8 <_svfiprintf_r+0xd8>
 8004686:	2300      	movs	r3, #0
 8004688:	3401      	adds	r4, #1
 800468a:	9305      	str	r3, [sp, #20]
 800468c:	4619      	mov	r1, r3
 800468e:	f04f 0c0a 	mov.w	ip, #10
 8004692:	4620      	mov	r0, r4
 8004694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004698:	3a30      	subs	r2, #48	@ 0x30
 800469a:	2a09      	cmp	r2, #9
 800469c:	d903      	bls.n	80046a6 <_svfiprintf_r+0x1a6>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0c6      	beq.n	8004630 <_svfiprintf_r+0x130>
 80046a2:	9105      	str	r1, [sp, #20]
 80046a4:	e7c4      	b.n	8004630 <_svfiprintf_r+0x130>
 80046a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046aa:	4604      	mov	r4, r0
 80046ac:	2301      	movs	r3, #1
 80046ae:	e7f0      	b.n	8004692 <_svfiprintf_r+0x192>
 80046b0:	ab03      	add	r3, sp, #12
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	462a      	mov	r2, r5
 80046b6:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <_svfiprintf_r+0x1f0>)
 80046b8:	a904      	add	r1, sp, #16
 80046ba:	4638      	mov	r0, r7
 80046bc:	f3af 8000 	nop.w
 80046c0:	1c42      	adds	r2, r0, #1
 80046c2:	4606      	mov	r6, r0
 80046c4:	d1d6      	bne.n	8004674 <_svfiprintf_r+0x174>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	065b      	lsls	r3, r3, #25
 80046ca:	f53f af2d 	bmi.w	8004528 <_svfiprintf_r+0x28>
 80046ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046d0:	e72c      	b.n	800452c <_svfiprintf_r+0x2c>
 80046d2:	ab03      	add	r3, sp, #12
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	462a      	mov	r2, r5
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <_svfiprintf_r+0x1f0>)
 80046da:	a904      	add	r1, sp, #16
 80046dc:	4638      	mov	r0, r7
 80046de:	f000 f879 	bl	80047d4 <_printf_i>
 80046e2:	e7ed      	b.n	80046c0 <_svfiprintf_r+0x1c0>
 80046e4:	08004b58 	.word	0x08004b58
 80046e8:	08004b62 	.word	0x08004b62
 80046ec:	00000000 	.word	0x00000000
 80046f0:	08004449 	.word	0x08004449
 80046f4:	08004b5e 	.word	0x08004b5e

080046f8 <_printf_common>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	4616      	mov	r6, r2
 80046fe:	4698      	mov	r8, r3
 8004700:	688a      	ldr	r2, [r1, #8]
 8004702:	690b      	ldr	r3, [r1, #16]
 8004704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004708:	4293      	cmp	r3, r2
 800470a:	bfb8      	it	lt
 800470c:	4613      	movlt	r3, r2
 800470e:	6033      	str	r3, [r6, #0]
 8004710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004714:	4607      	mov	r7, r0
 8004716:	460c      	mov	r4, r1
 8004718:	b10a      	cbz	r2, 800471e <_printf_common+0x26>
 800471a:	3301      	adds	r3, #1
 800471c:	6033      	str	r3, [r6, #0]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	0699      	lsls	r1, r3, #26
 8004722:	bf42      	ittt	mi
 8004724:	6833      	ldrmi	r3, [r6, #0]
 8004726:	3302      	addmi	r3, #2
 8004728:	6033      	strmi	r3, [r6, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	f015 0506 	ands.w	r5, r5, #6
 8004730:	d106      	bne.n	8004740 <_printf_common+0x48>
 8004732:	f104 0a19 	add.w	sl, r4, #25
 8004736:	68e3      	ldr	r3, [r4, #12]
 8004738:	6832      	ldr	r2, [r6, #0]
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	42ab      	cmp	r3, r5
 800473e:	dc26      	bgt.n	800478e <_printf_common+0x96>
 8004740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	3b00      	subs	r3, #0
 8004748:	bf18      	it	ne
 800474a:	2301      	movne	r3, #1
 800474c:	0692      	lsls	r2, r2, #26
 800474e:	d42b      	bmi.n	80047a8 <_printf_common+0xb0>
 8004750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004754:	4641      	mov	r1, r8
 8004756:	4638      	mov	r0, r7
 8004758:	47c8      	blx	r9
 800475a:	3001      	adds	r0, #1
 800475c:	d01e      	beq.n	800479c <_printf_common+0xa4>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	2b04      	cmp	r3, #4
 8004768:	bf02      	ittt	eq
 800476a:	68e5      	ldreq	r5, [r4, #12]
 800476c:	6833      	ldreq	r3, [r6, #0]
 800476e:	1aed      	subeq	r5, r5, r3
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	bf0c      	ite	eq
 8004774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004778:	2500      	movne	r5, #0
 800477a:	4293      	cmp	r3, r2
 800477c:	bfc4      	itt	gt
 800477e:	1a9b      	subgt	r3, r3, r2
 8004780:	18ed      	addgt	r5, r5, r3
 8004782:	2600      	movs	r6, #0
 8004784:	341a      	adds	r4, #26
 8004786:	42b5      	cmp	r5, r6
 8004788:	d11a      	bne.n	80047c0 <_printf_common+0xc8>
 800478a:	2000      	movs	r0, #0
 800478c:	e008      	b.n	80047a0 <_printf_common+0xa8>
 800478e:	2301      	movs	r3, #1
 8004790:	4652      	mov	r2, sl
 8004792:	4641      	mov	r1, r8
 8004794:	4638      	mov	r0, r7
 8004796:	47c8      	blx	r9
 8004798:	3001      	adds	r0, #1
 800479a:	d103      	bne.n	80047a4 <_printf_common+0xac>
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a4:	3501      	adds	r5, #1
 80047a6:	e7c6      	b.n	8004736 <_printf_common+0x3e>
 80047a8:	18e1      	adds	r1, r4, r3
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	2030      	movs	r0, #48	@ 0x30
 80047ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047b2:	4422      	add	r2, r4
 80047b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047bc:	3302      	adds	r3, #2
 80047be:	e7c7      	b.n	8004750 <_printf_common+0x58>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4622      	mov	r2, r4
 80047c4:	4641      	mov	r1, r8
 80047c6:	4638      	mov	r0, r7
 80047c8:	47c8      	blx	r9
 80047ca:	3001      	adds	r0, #1
 80047cc:	d0e6      	beq.n	800479c <_printf_common+0xa4>
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7d9      	b.n	8004786 <_printf_common+0x8e>
	...

080047d4 <_printf_i>:
 80047d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	7e0f      	ldrb	r7, [r1, #24]
 80047da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047dc:	2f78      	cmp	r7, #120	@ 0x78
 80047de:	4691      	mov	r9, r2
 80047e0:	4680      	mov	r8, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	469a      	mov	sl, r3
 80047e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ea:	d807      	bhi.n	80047fc <_printf_i+0x28>
 80047ec:	2f62      	cmp	r7, #98	@ 0x62
 80047ee:	d80a      	bhi.n	8004806 <_printf_i+0x32>
 80047f0:	2f00      	cmp	r7, #0
 80047f2:	f000 80d2 	beq.w	800499a <_printf_i+0x1c6>
 80047f6:	2f58      	cmp	r7, #88	@ 0x58
 80047f8:	f000 80b9 	beq.w	800496e <_printf_i+0x19a>
 80047fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004804:	e03a      	b.n	800487c <_printf_i+0xa8>
 8004806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800480a:	2b15      	cmp	r3, #21
 800480c:	d8f6      	bhi.n	80047fc <_printf_i+0x28>
 800480e:	a101      	add	r1, pc, #4	@ (adr r1, 8004814 <_printf_i+0x40>)
 8004810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004814:	0800486d 	.word	0x0800486d
 8004818:	08004881 	.word	0x08004881
 800481c:	080047fd 	.word	0x080047fd
 8004820:	080047fd 	.word	0x080047fd
 8004824:	080047fd 	.word	0x080047fd
 8004828:	080047fd 	.word	0x080047fd
 800482c:	08004881 	.word	0x08004881
 8004830:	080047fd 	.word	0x080047fd
 8004834:	080047fd 	.word	0x080047fd
 8004838:	080047fd 	.word	0x080047fd
 800483c:	080047fd 	.word	0x080047fd
 8004840:	08004981 	.word	0x08004981
 8004844:	080048ab 	.word	0x080048ab
 8004848:	0800493b 	.word	0x0800493b
 800484c:	080047fd 	.word	0x080047fd
 8004850:	080047fd 	.word	0x080047fd
 8004854:	080049a3 	.word	0x080049a3
 8004858:	080047fd 	.word	0x080047fd
 800485c:	080048ab 	.word	0x080048ab
 8004860:	080047fd 	.word	0x080047fd
 8004864:	080047fd 	.word	0x080047fd
 8004868:	08004943 	.word	0x08004943
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6032      	str	r2, [r6, #0]
 8004874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800487c:	2301      	movs	r3, #1
 800487e:	e09d      	b.n	80049bc <_printf_i+0x1e8>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	1d19      	adds	r1, r3, #4
 8004886:	6031      	str	r1, [r6, #0]
 8004888:	0606      	lsls	r6, r0, #24
 800488a:	d501      	bpl.n	8004890 <_printf_i+0xbc>
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	e003      	b.n	8004898 <_printf_i+0xc4>
 8004890:	0645      	lsls	r5, r0, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0xb8>
 8004894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004898:	2d00      	cmp	r5, #0
 800489a:	da03      	bge.n	80048a4 <_printf_i+0xd0>
 800489c:	232d      	movs	r3, #45	@ 0x2d
 800489e:	426d      	negs	r5, r5
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a4:	4859      	ldr	r0, [pc, #356]	@ (8004a0c <_printf_i+0x238>)
 80048a6:	230a      	movs	r3, #10
 80048a8:	e011      	b.n	80048ce <_printf_i+0xfa>
 80048aa:	6821      	ldr	r1, [r4, #0]
 80048ac:	6833      	ldr	r3, [r6, #0]
 80048ae:	0608      	lsls	r0, r1, #24
 80048b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048b4:	d402      	bmi.n	80048bc <_printf_i+0xe8>
 80048b6:	0649      	lsls	r1, r1, #25
 80048b8:	bf48      	it	mi
 80048ba:	b2ad      	uxthmi	r5, r5
 80048bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80048be:	4853      	ldr	r0, [pc, #332]	@ (8004a0c <_printf_i+0x238>)
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	bf14      	ite	ne
 80048c4:	230a      	movne	r3, #10
 80048c6:	2308      	moveq	r3, #8
 80048c8:	2100      	movs	r1, #0
 80048ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048ce:	6866      	ldr	r6, [r4, #4]
 80048d0:	60a6      	str	r6, [r4, #8]
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	bfa2      	ittt	ge
 80048d6:	6821      	ldrge	r1, [r4, #0]
 80048d8:	f021 0104 	bicge.w	r1, r1, #4
 80048dc:	6021      	strge	r1, [r4, #0]
 80048de:	b90d      	cbnz	r5, 80048e4 <_printf_i+0x110>
 80048e0:	2e00      	cmp	r6, #0
 80048e2:	d04b      	beq.n	800497c <_printf_i+0x1a8>
 80048e4:	4616      	mov	r6, r2
 80048e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ea:	fb03 5711 	mls	r7, r3, r1, r5
 80048ee:	5dc7      	ldrb	r7, [r0, r7]
 80048f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048f4:	462f      	mov	r7, r5
 80048f6:	42bb      	cmp	r3, r7
 80048f8:	460d      	mov	r5, r1
 80048fa:	d9f4      	bls.n	80048e6 <_printf_i+0x112>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d10b      	bne.n	8004918 <_printf_i+0x144>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	07df      	lsls	r7, r3, #31
 8004904:	d508      	bpl.n	8004918 <_printf_i+0x144>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	6861      	ldr	r1, [r4, #4]
 800490a:	4299      	cmp	r1, r3
 800490c:	bfde      	ittt	le
 800490e:	2330      	movle	r3, #48	@ 0x30
 8004910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004918:	1b92      	subs	r2, r2, r6
 800491a:	6122      	str	r2, [r4, #16]
 800491c:	f8cd a000 	str.w	sl, [sp]
 8004920:	464b      	mov	r3, r9
 8004922:	aa03      	add	r2, sp, #12
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fee6 	bl	80046f8 <_printf_common>
 800492c:	3001      	adds	r0, #1
 800492e:	d14a      	bne.n	80049c6 <_printf_i+0x1f2>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	b004      	add	sp, #16
 8004936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f043 0320 	orr.w	r3, r3, #32
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	4833      	ldr	r0, [pc, #204]	@ (8004a10 <_printf_i+0x23c>)
 8004944:	2778      	movs	r7, #120	@ 0x78
 8004946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	6831      	ldr	r1, [r6, #0]
 800494e:	061f      	lsls	r7, r3, #24
 8004950:	f851 5b04 	ldr.w	r5, [r1], #4
 8004954:	d402      	bmi.n	800495c <_printf_i+0x188>
 8004956:	065f      	lsls	r7, r3, #25
 8004958:	bf48      	it	mi
 800495a:	b2ad      	uxthmi	r5, r5
 800495c:	6031      	str	r1, [r6, #0]
 800495e:	07d9      	lsls	r1, r3, #31
 8004960:	bf44      	itt	mi
 8004962:	f043 0320 	orrmi.w	r3, r3, #32
 8004966:	6023      	strmi	r3, [r4, #0]
 8004968:	b11d      	cbz	r5, 8004972 <_printf_i+0x19e>
 800496a:	2310      	movs	r3, #16
 800496c:	e7ac      	b.n	80048c8 <_printf_i+0xf4>
 800496e:	4827      	ldr	r0, [pc, #156]	@ (8004a0c <_printf_i+0x238>)
 8004970:	e7e9      	b.n	8004946 <_printf_i+0x172>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f023 0320 	bic.w	r3, r3, #32
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	e7f6      	b.n	800496a <_printf_i+0x196>
 800497c:	4616      	mov	r6, r2
 800497e:	e7bd      	b.n	80048fc <_printf_i+0x128>
 8004980:	6833      	ldr	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	6961      	ldr	r1, [r4, #20]
 8004986:	1d18      	adds	r0, r3, #4
 8004988:	6030      	str	r0, [r6, #0]
 800498a:	062e      	lsls	r6, r5, #24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	d501      	bpl.n	8004994 <_printf_i+0x1c0>
 8004990:	6019      	str	r1, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0x1c6>
 8004994:	0668      	lsls	r0, r5, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0x1bc>
 8004998:	8019      	strh	r1, [r3, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	4616      	mov	r6, r2
 80049a0:	e7bc      	b.n	800491c <_printf_i+0x148>
 80049a2:	6833      	ldr	r3, [r6, #0]
 80049a4:	1d1a      	adds	r2, r3, #4
 80049a6:	6032      	str	r2, [r6, #0]
 80049a8:	681e      	ldr	r6, [r3, #0]
 80049aa:	6862      	ldr	r2, [r4, #4]
 80049ac:	2100      	movs	r1, #0
 80049ae:	4630      	mov	r0, r6
 80049b0:	f7fb fc16 	bl	80001e0 <memchr>
 80049b4:	b108      	cbz	r0, 80049ba <_printf_i+0x1e6>
 80049b6:	1b80      	subs	r0, r0, r6
 80049b8:	6060      	str	r0, [r4, #4]
 80049ba:	6863      	ldr	r3, [r4, #4]
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	2300      	movs	r3, #0
 80049c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c4:	e7aa      	b.n	800491c <_printf_i+0x148>
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	4632      	mov	r2, r6
 80049ca:	4649      	mov	r1, r9
 80049cc:	4640      	mov	r0, r8
 80049ce:	47d0      	blx	sl
 80049d0:	3001      	adds	r0, #1
 80049d2:	d0ad      	beq.n	8004930 <_printf_i+0x15c>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	079b      	lsls	r3, r3, #30
 80049d8:	d413      	bmi.n	8004a02 <_printf_i+0x22e>
 80049da:	68e0      	ldr	r0, [r4, #12]
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	4298      	cmp	r0, r3
 80049e0:	bfb8      	it	lt
 80049e2:	4618      	movlt	r0, r3
 80049e4:	e7a6      	b.n	8004934 <_printf_i+0x160>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4632      	mov	r2, r6
 80049ea:	4649      	mov	r1, r9
 80049ec:	4640      	mov	r0, r8
 80049ee:	47d0      	blx	sl
 80049f0:	3001      	adds	r0, #1
 80049f2:	d09d      	beq.n	8004930 <_printf_i+0x15c>
 80049f4:	3501      	adds	r5, #1
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	9903      	ldr	r1, [sp, #12]
 80049fa:	1a5b      	subs	r3, r3, r1
 80049fc:	42ab      	cmp	r3, r5
 80049fe:	dcf2      	bgt.n	80049e6 <_printf_i+0x212>
 8004a00:	e7eb      	b.n	80049da <_printf_i+0x206>
 8004a02:	2500      	movs	r5, #0
 8004a04:	f104 0619 	add.w	r6, r4, #25
 8004a08:	e7f5      	b.n	80049f6 <_printf_i+0x222>
 8004a0a:	bf00      	nop
 8004a0c:	08004b69 	.word	0x08004b69
 8004a10:	08004b7a 	.word	0x08004b7a

08004a14 <memmove>:
 8004a14:	4288      	cmp	r0, r1
 8004a16:	b510      	push	{r4, lr}
 8004a18:	eb01 0402 	add.w	r4, r1, r2
 8004a1c:	d902      	bls.n	8004a24 <memmove+0x10>
 8004a1e:	4284      	cmp	r4, r0
 8004a20:	4623      	mov	r3, r4
 8004a22:	d807      	bhi.n	8004a34 <memmove+0x20>
 8004a24:	1e43      	subs	r3, r0, #1
 8004a26:	42a1      	cmp	r1, r4
 8004a28:	d008      	beq.n	8004a3c <memmove+0x28>
 8004a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a32:	e7f8      	b.n	8004a26 <memmove+0x12>
 8004a34:	4402      	add	r2, r0
 8004a36:	4601      	mov	r1, r0
 8004a38:	428a      	cmp	r2, r1
 8004a3a:	d100      	bne.n	8004a3e <memmove+0x2a>
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a46:	e7f7      	b.n	8004a38 <memmove+0x24>

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	@ (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc f828 	bl	8000aa8 <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	200002a4 	.word	0x200002a4

08004a68 <memcpy>:
 8004a68:	440a      	add	r2, r1
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xc>
 8004a72:	4770      	bx	lr
 8004a74:	b510      	push	{r4, lr}
 8004a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	d1f9      	bne.n	8004a76 <memcpy+0xe>
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <_realloc_r>:
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	4680      	mov	r8, r0
 8004a8a:	4615      	mov	r5, r2
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	b921      	cbnz	r1, 8004a9a <_realloc_r+0x16>
 8004a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a94:	4611      	mov	r1, r2
 8004a96:	f7ff bc4b 	b.w	8004330 <_malloc_r>
 8004a9a:	b92a      	cbnz	r2, 8004aa8 <_realloc_r+0x24>
 8004a9c:	f7ff fbdc 	bl	8004258 <_free_r>
 8004aa0:	2400      	movs	r4, #0
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa8:	f000 f81a 	bl	8004ae0 <_malloc_usable_size_r>
 8004aac:	4285      	cmp	r5, r0
 8004aae:	4606      	mov	r6, r0
 8004ab0:	d802      	bhi.n	8004ab8 <_realloc_r+0x34>
 8004ab2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ab6:	d8f4      	bhi.n	8004aa2 <_realloc_r+0x1e>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fc38 	bl	8004330 <_malloc_r>
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0ec      	beq.n	8004aa0 <_realloc_r+0x1c>
 8004ac6:	42b5      	cmp	r5, r6
 8004ac8:	462a      	mov	r2, r5
 8004aca:	4621      	mov	r1, r4
 8004acc:	bf28      	it	cs
 8004ace:	4632      	movcs	r2, r6
 8004ad0:	f7ff ffca 	bl	8004a68 <memcpy>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f7ff fbbe 	bl	8004258 <_free_r>
 8004adc:	463c      	mov	r4, r7
 8004ade:	e7e0      	b.n	8004aa2 <_realloc_r+0x1e>

08004ae0 <_malloc_usable_size_r>:
 8004ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae4:	1f18      	subs	r0, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfbc      	itt	lt
 8004aea:	580b      	ldrlt	r3, [r1, r0]
 8004aec:	18c0      	addlt	r0, r0, r3
 8004aee:	4770      	bx	lr

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
